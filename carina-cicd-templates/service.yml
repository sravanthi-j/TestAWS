image: nick4fake/docker-hilti:v0.0

variables:
  PROJECT: "carina"
#  NAME: ""
  ECR_PROXY_REPO: "779191825743.dkr.ecr.eu-west-1.amazonaws.com/ecr-proxy"

stages:
- build
- test
- push-work
- deploy-work
- push-q
- deploy-q
- push-stage
- deploy-stage
- push-prod
- deploy-prod


# -- Anchors ------------------------------ #

# We have single expiration policy for all artifacts
.artifacts_config_anchor: &artifacts_config
  when: always
  expire_in: 1 month

# Extend path in artifacts with job status
.job_status_anchor: &job_status
  ./${CI_JOB_NAME}-${CI_COMMIT_SHA}

# Used to target default build environment
.default_env_anchor: &default_env
  tags:
  - aws
  - type-docker
  - environment-dev

.default_env_windows_anchor: &default_env_windows
  tags:
  - aws
  - type-windows
  - environment-dev

# Authorizes in ECR in current environment
.auth_ecr_anchor:
- &auth_ecr
  eval $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}");

# Authorizes in ECR in default environment
.auth_ecr_proxy_anchor:
- &auth_ecr_proxy
  eval $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}" --registry-ids "779191825743");

# login to docker hub
.docker_login_anchor:
  - &docker_login
    echo ${DOCKER_TOKEN} | docker login -u ${DOCKER_USER} --password-stdin

# Pulls image from proxy ECR for caching
.ecr_proxy_pull_anchor:
- &ecr_proxy_pull
  if [ "${DOCKER_BUILD_STAGE}" != "" ]; then
    docker pull "${REPO_PROXY_PREFIX}${VERSION_LATEST}-build" || true;
    docker tag "${REPO_PROXY_PREFIX}${VERSION_LATEST}-build" "${SERVICE_NAME}:${VERSION_FULL}-build" || true;
  fi;
  docker pull "${REPO_PROXY_PREFIX}${VERSION_LATEST}" || true;
  docker tag "${REPO_PROXY_PREFIX}${VERSION_LATEST}" "${SERVICE_NAME}:${VERSION_FULL}" || true;

# Pushes image to proxy ECR for caching
.ecr_proxy_push_anchor:
- &ecr_proxy_push
  if [ "${DOCKER_BUILD_STAGE}" != "" ]; then
    docker tag "${SERVICE_NAME}:${VERSION_FULL}-build" "${REPO_PROXY_PREFIX}${VERSION_LATEST}-build";
    docker push "${REPO_PROXY_PREFIX}${VERSION_LATEST}-build";
  fi;
  docker tag "${SERVICE_NAME}:${VERSION_FULL}" "${REPO_PROXY_PREFIX}${VERSION_FULL}";
  docker push "${REPO_PROXY_PREFIX}${VERSION_FULL}";
  docker tag "${SERVICE_NAME}:${VERSION_FULL}" "${REPO_PROXY_PREFIX}${VERSION_LATEST}";
  docker push "${REPO_PROXY_PREFIX}${VERSION_LATEST}";

# Exports various environment variables related to the current service
.variables_anchor:
- &variables
  export SERVICE_NAME="${MODULE_PREFIX}${PROJECT}-${NAME}";
  export ECR_REPO="${AWS_ID}.dkr.ecr.eu-west-1.amazonaws.com/${MODULE_PREFIX}${PROJECT}-${NAME}";
  export VERSION="$(echo ${CI_COMMIT_SHA} | cut -c1-6)";
  export VERSION_FULL="${CI_COMMIT_REF_SLUG}-${VERSION}";
  export VERSION_LATEST="${CI_COMMIT_REF_SLUG}-latest";
  export REPO_PROXY_PREFIX="${ECR_PROXY_REPO}:hilti-${PROJECT}-${NAME}-";
  export REPO_PREFIX="${ECR_REPO}:";
  export AUTHOR=`git show --format="%aN <%aE>" --no-patch`;

# Generates Version file
.version_generate_anchor:
- &version_generate
  echo \{\"Timestamp\":\"$(date +%Y-%m-%d_%H:%M)\",\"Build\":\"${CI_PIPELINE_IID}\",\"Project\":\"${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}\",\"Branch\|tag\":\"${CI_COMMIT_REF_NAME}\",\"Commit\":\"${CI_COMMIT_SHA}\"\,\"Author\":\"${AUTHOR}\"\} > ${DOCKER_ROOT}/Version;
  cat ${DOCKER_ROOT}/Version;


.iterate_artifacts_anchor:
- &iterate_artifacts
  function iterate_artifacts() {
    old_nullglob=$(shopt -p | grep 'nullglob$');
    shopt -s nullglob;
    GLOB="./${1}/*";
    ARTIFACTS=(${GLOB});
    eval "$old_nullglob";
    unset -v old_nullglob;
    for ARTIFACT in "${ARTIFACTS[@]}"; do
      export NAME=$(basename ${ARTIFACT} | cut -d. -f1);
      ${2};
    done
  }

# Send notification about successful build/test
.slack_build_success_anchor:
- &slack_success_build
  echo ok > ./${CI_JOB_NAME}-${CI_COMMIT_SHA};
  if [ -z "${SLACK_BUILD_WEBHOOK_URL}" ]; then
    echo "Build completed successfully, but variable for Slack notifications is not defined";
    exit 0;
  else
    curl -s -X POST --data-urlencode "payload={\"channel\":\"#${SLACK_CHANNEL_BUILD}\",\"username\":\"${SLACK_USERNAME}\",\"text\":\":heavy_check_mark:*${CI_JOB_NAME}* for <${CI_PROJECT_URL}|${CI_PROJECT_PATH}> of branch *${CI_COMMIT_REF_NAME}* commit by ${AUTHOR} passed. Job <${CI_JOB_URL}|${CI_JOB_NAME}>\"}" "${SLACK_BUILD_WEBHOOK_URL}";
  fi;

# Send notification about successful deployment
.slack_deploy_success_anchor:
- &slack_success_deploy
  echo ok > ./${CI_JOB_NAME}-${CI_COMMIT_SHA};
  if [ -z "${SLACK_DEPLOY_WEBHOOK_URL}" ]; then
    echo "Deploy completed successfully, but variable for Slack notifications is not defined";
    exit 0;
  else
    curl -s -X POST --data-urlencode "payload={\"channel\":\"#${SLACK_CHANNEL_DEPLOY}\",\"username\":\"${SLACK_USERNAME}\",\"text\":\":heavy_check_mark:*${CI_JOB_NAME}* for <${CI_PROJECT_URL}|${CI_PROJECT_PATH}> of branch *${CI_COMMIT_REF_NAME}* commit by ${AUTHOR} passed. Job <${CI_JOB_URL}|${CI_JOB_NAME}>\"}" "${SLACK_DEPLOY_WEBHOOK_URL}";
  fi;

# Send notification about fail
.slack_failure_anchor:
- &slack_failure
  if [ ! -e "./${CI_JOB_NAME}-${CI_COMMIT_SHA}" ]; then
    if [ -z "${SLACK_FAIL_WEBHOOK_URL}" ]; then
      echo "Job failed, but variable for Slack notifications is not defined";
      exit 1;
    else
      curl -s -X POST --data-urlencode "payload={\"channel\":\"#${SLACK_CHANNEL_FAIL}\",\"username\":\"${SLACK_USERNAME}\",\"text\":\":heavy_multiplication_x:*${CI_JOB_NAME}* for <${CI_PROJECT_URL}|${CI_PROJECT_PATH}> of branch *${CI_COMMIT_REF_NAME}* failed. Job <${CI_JOB_URL}|${CI_JOB_NAME}>\"}" "${SLACK_FAIL_WEBHOOK_URL}";
    fi;
  fi;

# Send notification for windows builds
.slack_windows_anchor:
- &slack_windows
  $Env:AUTHOR = "$(git show --format="%aN <%aE>" --no-patch)";
  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;
  if (Test-Path "Env:BUILD_ARTIFACT" -ErrorAction SilentlyContinue){
    $BuildArtifact = (gci -ErrorAction SilentlyContinue "Env:BUILD_ARTIFACT").Value;
  }
  else{
    $BuildArtifact = "deploy.zip";
  };
  Write-Host "Build artifact package - $BuildArtifact";
  if (Test-Path ".\ansible\$((gci Env:NAME).Value)\$BuildArtifact" -ErrorAction SilentlyContinue -PathType Leaf) {
    $body = ConvertTo-Json @{
        type = "mrkdwn";
        text = ":heavy_check_mark:*$((gci Env:CI_JOB_NAME).Value)* for <$((gci Env:CI_PROJECT_URL).Value)|$((gci Env:CI_PROJECT_PATH).Value)> of branch *$((gci Env:CI_COMMIT_REF_NAME).Value)* commit by $((gci Env:AUTHOR).Value) passed. Job <$((gci Env:CI_JOB_URL).Value)|$((gci Env:CI_JOB_NAME).Value)>"
    };
    $URI = "$((gci Env:SLACK_BUILD_WEBHOOK_URL).Value)";
  }
  else{
    $body = ConvertTo-Json @{
        type = "mrkdwn";
        text = ":heavy_multiplication_x:*$((gci Env:CI_JOB_NAME).Value)* for <$((gci Env:CI_PROJECT_URL).Value)|$((gci Env:CI_PROJECT_PATH).Value)> of branch *$((gci Env:CI_COMMIT_REF_NAME).Value)* commit by $((gci Env:AUTHOR).Value) failed. Job <$((gci Env:CI_JOB_URL).Value)|$((gci Env:CI_JOB_NAME).Value)>"
    };
    $URI = "$((gci Env:SLACK_FAIL_WEBHOOK_URL).Value)";
    Write-Host "Error - build artifact .\ansible\$((gci Env:NAME).Value)\$BuildArtifact not found";
  };
  Write-Host "URI:" $URI;
  Write-Host "BODY:" $body;
  try {
      Invoke-RestMethod -uri $URI -Method POST -body $body -ContentType 'application/json' | Out-Null;
    } catch {
      Write-Host "ERROR - Post to Slack failed.";
    };
# -- Build ------------------------------ #

# Basic build job template
.build_template:
  <<: *default_env
  stage: build
  allow_failure: false
  before_script:
  - *variables
  - *auth_ecr_proxy
  - *ecr_proxy_pull
  - *version_generate
  - *docker_login
  variables:
    DOCKER_ROOT: "."
    DOCKER_FILE: "Dockerfile"


# Basic build job template for service
.build_service_template:
  extends: .build_template
  variables:
    # If not empty we would use multistage builds
    DOCKER_BUILD_STAGE: ""
  artifacts:
    <<: *artifacts_config
    paths:
    - *job_status
    - services
  script:
  - if [ "${DOCKER_BUILD_STAGE}" != "" ]; then
      docker build -t "${SERVICE_NAME}:${VERSION_FULL}-build" ${DOCKER_BUILD_ARGS}
        --cache-from "${SERVICE_NAME}:${VERSION_FULL}-build"
        --target "${DOCKER_BUILD_STAGE}"
        ${DOCKER_ROOT} -f ${DOCKER_FILE};
      docker build -t "${SERVICE_NAME}:${VERSION_FULL}" ${DOCKER_BUILD_ARGS}
        --cache-from "${SERVICE_NAME}:${VERSION_FULL}-build"
        --cache-from "${SERVICE_NAME}:${VERSION_FULL}"
        ${DOCKER_ROOT} -f ${DOCKER_FILE};
    else
      docker build -t "${SERVICE_NAME}:${VERSION_FULL}" ${DOCKER_BUILD_ARGS}
        --cache-from "${SERVICE_NAME}:${VERSION_FULL}"
        ${DOCKER_ROOT} -f ${DOCKER_FILE};
    fi;
  - *ecr_proxy_push
  - mkdir -p "./services/${NAME}"
  - if [ "${MIGRATION_DOCKER_FILE}" != "" ]; then
      echo "${MIGRATION_DOCKER_FILE}" > "./services/${NAME}/migration_docker_file";
      echo "${MIGRATION_DOCKER_ROOT}" > "./services/${NAME}/migration_docker_root";
    fi;
  - echo "${SERVICE_NAME}:${VERSION_FULL}" > "./services/${NAME}/ecr_repo"
  - *slack_success_build
  after_script:
  - *slack_failure
  rules:
    - if: $NAME != null && $DOCKER_ROOT != null && $DOCKER_FILE != null
      when: on_success

# Basic build job template for lambda
.build_lambda_template:
  extends: .build_template
  artifacts:
    <<: *artifacts_config
    paths:
    - *job_status
    - lambdas
  script:
  - docker build -t "${SERVICE_NAME}:${VERSION_FULL}" ${DOCKER_BUILD_ARGS}
      --cache-from "${SERVICE_NAME}:${VERSION_FULL}"
      ${DOCKER_ROOT} -f ${DOCKER_FILE}
  - *ecr_proxy_push
  - export CONTAINER_NAME="${SERVICE_NAME}-${VERSION_FULL}"
  - docker stop "${CONTAINER_NAME}" || true
  - docker rm "${CONTAINER_NAME}" || true
  - docker run --name "${CONTAINER_NAME}" ${DOCKER_RUN_ARGS} "${SERVICE_NAME}:${VERSION_FULL}" bash -c 'echo 1'
  - mkdir -p "./lambdas/${NAME}"
  - docker cp "${CONTAINER_NAME}:/lambda.zip" "./lambdas/${NAME}/output.zip"
  - docker rm "${CONTAINER_NAME}"
  - *slack_success_build
  after_script:
  - *slack_failure
  rules:
    - if: $NAME != null && $DOCKER_ROOT != null && $DOCKER_FILE != null
      when: on_success

# Basic build job template for powershell-based stuff
.build_powershell_template:
  <<: *default_env_windows
  stage: build
  allow_failure: false
  artifacts:
    <<: *artifacts_config
    paths:
    - *job_status
    - ansible
    - reports
  rules:
    - if: $NAME == null
      when: never
  after_script:
  - *slack_windows

# -- Push ------------------------------ #

.push_basic_template:
  <<: *default_env
  stage: push
  allow_failure: false
  before_script:
  - *auth_ecr_proxy
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never

.push_template:
  extends: .push_basic_template
  script:
  - *iterate_artifacts
  - function iterator_lambdas() {
  -   *variables
  -   echo "Pushing lambda ${SERVICE_NAME}:"
  -   aws s3 cp "${ARTIFACT}/output.zip" "s3://${S3_BUCKET}/${S3_PREFIX}lambdas/${SERVICE_NAME}/${VERSION_FULL}.zip"
        --metadata "hash=$(sha256sum \"${ARTIFACT}/output.zip\"  | cut -d ' ' -f 1 | xxd -r -p | base64 | tr -d '\n')"
        --content-type application/zip
  - "}"
  - function iterator_services() {
  -   *variables
  -   echo "Pushing service ${SERVICE_NAME}:"
  -   *auth_ecr
  -   docker pull "${REPO_PROXY_PREFIX}${VERSION_LATEST}"
  -   docker tag "${REPO_PROXY_PREFIX}${VERSION_LATEST}" "${SERVICE_NAME}:${VERSION_FULL}"
  -   docker tag "${SERVICE_NAME}:${VERSION_FULL}" "${REPO_PREFIX}${VERSION_FULL}"
  -   docker push "${REPO_PREFIX}${VERSION_FULL}"
  -   docker tag "${SERVICE_NAME}:${VERSION_FULL}" "${REPO_PREFIX}${VERSION_LATEST}"
  -   docker push "${REPO_PREFIX}${VERSION_LATEST}"
  - "}"
  - iterate_artifacts "./lambdas" iterator_lambdas
  - iterate_artifacts "./services" iterator_services


# -- Test ------------------------------ #
.test_basic_template:
  <<: *default_env
  stage: test
  allow_failure: false


.test_template:
  extends: .test_basic_template
  before_script:
  - *variables
  - *auth_ecr_proxy
  - *docker_login
  artifacts:
    <<: *artifacts_config
    paths:
    - *job_status
    - ./reports
    reports:
      junit: ./reports/**/report.xml
  rules:
    - if: '$NAME != null && $DOCKER_FILE != null && $DOCKER_ROOT != null'
      when: on_success
    - if: '$INTEGRATION_TEST != null'
      when: on_success
  script:
  - docker build -t "${SERVICE_NAME}:${VERSION_FULL}" ${DOCKER_BUILD_ARGS}
      --cache-from "${SERVICE_NAME}:${VERSION_FULL}"
      ${DOCKER_ROOT} -f ${DOCKER_FILE}
  - docker tag "${SERVICE_NAME}:${VERSION_FULL}" "${REPO_PROXY_PREFIX}${VERSION_LATEST}";
  - docker push "${REPO_PROXY_PREFIX}${VERSION_LATEST}";
  - export CONTAINER_NAME="${SERVICE_NAME}-${VERSION_FULL}"
  - docker stop "${CONTAINER_NAME}" || true
  - docker rm "${CONTAINER_NAME}" || true
  - docker run --name "${CONTAINER_NAME}" ${DOCKER_RUN_ARGS} "${SERVICE_NAME}:${VERSION_FULL}" ${DOCKER_CMD}
  - mkdir -p "./reports"
  - docker cp "${CONTAINER_NAME}:/reports" "./reports/${NAME}" || true
  - docker rm "${CONTAINER_NAME}"
  - *slack_success_build
  after_script:
  - *slack_failure


# -- Deploy ------------------------------ #

.deploy_basic_template:
  stage: deploy
  allow_failure: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never

.deploy_template:
  extends: .deploy_basic_template
  artifacts:
    <<: *artifacts_config
    paths:
    - *job_status
    - outputs
  script:
  - *iterate_artifacts
  - *auth_ecr
  - mkdir -p "./outputs"
  - |
    cat > parse_vars.py << 'EOF'
    import sys
    import json
    data = "\n".join(sys.stdin.readlines()).strip()
    data = json.loads(data if (data != "" and data != "null") else "{}")
    def strip_var(v):
      return v.replace('"', '\\"').replace('$', '\\$').replace('`', '\\`')
    if len(sys.argv) > 1:
      print json.dumps([{sys.argv[1]: k, "value": data[k]} for k in data])
    else:
      print "\n".join(["{}={}".format(strip_var(k), strip_var(data[k])) for k in data]).strip()
    EOF
  - function iterator_ansible() {
  -   *variables
  -   echo "Deploying ansible playbook for ${SERVICE_NAME}:"
  -   aws s3 cp --recursive "s3://${S3_BUCKET}/${S3_PREFIX}service-variables/${PROJECT}/${NAME}" ./configs
  -   ansible-playbook -v -i "./configs/inventory.ini" "${ARTIFACT}/playbook.yml"
  - "}"
  - function iterator_lambdas() {
  -   *variables
  -   echo "Deploying lambda ${SERVICE_NAME}:"
  -   aws lambda update-function-code --publish --function-name "${SERVICE_NAME}"
        --s3-bucket=${S3_BUCKET} --s3-key="${S3_PREFIX}lambdas/${SERVICE_NAME}/${VERSION_FULL}.zip"
  - "}"
  - function iterator_services() {
  -   *variables
  -   echo "Deploying service ${SERVICE_NAME}:"
  -   aws s3 cp --recursive "s3://${S3_BUCKET}/${S3_PREFIX}service-variables/${PROJECT}/${NAME}" ./configs
  -   touch ./configs/variables.json
  -   cat "./configs/variables.json" | python "./parse_vars.py" > "./outputs/${SERVICE_NAME}-env.sh"
  -   if [ -f "./services/${NAME}/migration_docker_file" ]; then
        echo "Building migration image";
        MIGRATION_DOCKER_FILE="$(cat "./services/${NAME}/migration_docker_file")";
        MIGRATION_DOCKER_ROOT="$(cat "./services/${NAME}/migration_docker_root")";
        MIGRATION_IMAGE="${SERVICE_NAME}:${VERSION_FULL}-migration";
        docker build -t "${MIGRATION_IMAGE}"
          --build-arg STUB_REPO="${STUB_ECR_REPO}"
          --build-arg PROJECT_PREFIX="${MODULE_PREFIX}${PROJECT}-"
          ${MIGRATION_DOCKER_ROOT} -f ${MIGRATION_DOCKER_FILE};
        echo "Running migrations";
        docker run --rm --env-file "./outputs/${SERVICE_NAME}-env.sh" "${MIGRATION_IMAGE}";
      fi;
      # Temporary solution, see:
      # https://github.com/hashicorp/terraform/issues/13512
  -   cat "./configs/task-definition.json" | jq -c "
        .containerDefinitions[0].image = \"${REPO_PREFIX}${VERSION_FULL}\"
        |.containerDefinitions[0].environment = $(cat "./configs/variables.json" | python "./parse_vars.py" name)
        |.tags = $(cat "./configs/task-definition.json" | jq -c '.tags' | python "./parse_vars.py" key)
        " | tee "./outputs/${SERVICE_NAME}-td.json"
  -   aws ecs register-task-definition --family "${SERVICE_NAME}" --cli-input-json "file://outputs/${SERVICE_NAME}-td.json"
  -   aws ecs update-service --cluster "${CLUSTER}" --service "${SERVICE_NAME}" --task-definition "${SERVICE_NAME}" --force-new-deployment
  - "}"
  - iterate_artifacts "./lambdas" iterator_lambdas
  - iterate_artifacts "./services" iterator_services
  - iterate_artifacts "./ansible" iterator_ansible
  - *slack_success_deploy
  after_script:
  - *slack_failure
